{"version":3,"file":"index.min.js","sources":["../src/core/TaskEvent.ts","../src/core/TaskState.ts","../src/core/Task.ts","../src/task/Call.ts","../src/task/Nop.ts","../src/core/TaskList.ts","../src/task/Tween.ts","../src/task/Break.ts","../src/task/Callback.ts","../src/task/If.ts","../src/task/Listen.ts","../src/task/Log.ts","../src/task/Parallel.ts","../src/task/Return.ts","../src/task/Serial.ts","../src/task/Delay.ts","../src/functions.ts","../src/utils.ts"],"sourcesContent":["export enum TaskEventType {\n\tcomplete = 'complete',\n}\n\nexport class TaskEvent extends CustomEvent<void> {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(type: TaskEventType) {\n\t\tsuper(type);\n\t}\n}\n","export enum TaskState {\n\tsleeping = 0,\n\trunning = 1,\n\tinterrupting = 2,\n}\n","import { TaskEvent, TaskEventType } from './TaskEvent';\nimport { TaskState } from './TaskState';\n\nexport abstract class Task extends EventTarget {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tprotected constructor() {\n\t\tsuper();\n\t\tthis.state = TaskState.sleeping;\n\t\tthis.self = this;\n\t\tthis.parent = null;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tpublic run(): void {\n\t\tif (this.state > TaskState.sleeping) {\n\t\t\tthrow new Error('[Task.run] + Task is already running.');\n\t\t}\n\t\tthis.state = TaskState.running;\n\t\tthis.implRun.call(this, this);\n\t}\n\n\tpublic interrupt(): void {\n\t\tif (this.state === TaskState.running) {\n\t\t\tthis.state = TaskState.interrupting;\n\t\t\tthis.implInterrupt.call(this, this);\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.state = TaskState.sleeping;\n\t\tthis.implDispose.call(this, this);\n\t\tthis.parent = null;\n\t}\n\n\tprotected notifyComplete(): void {\n\t\tswitch (this.state) {\n\t\t\tcase TaskState.sleeping:\n\t\t\t\tbreak;\n\t\t\tcase TaskState.running:\n\t\t\t\tthis.dispatchEvent(new TaskEvent(TaskEventType.complete));\n\t\t\t\tthis.dispose();\n\t\t\t\tbreak;\n\t\t\tcase TaskState.interrupting:\n\t\t\t\tthis.dispatchEvent(new TaskEvent(TaskEventType.complete));\n\t\t\t\tthis.dispose();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic getState(): TaskState {\n\t\treturn this.state;\n\t}\n\n\tpublic getParent(): Task {\n\t\treturn this.parent;\n\t}\n\n\tpublic setParent(parent: Task): void {\n\t\tthis.parent = parent;\n\t}\n\n\tpublic getSelf(): Task {\n\t\treturn this.self;\n\t}\n\n\tprotected abstract implRun(task: Task): void;\n\n\tprotected abstract implInterrupt(task: Task): void;\n\n\tprotected abstract implDispose(task: Task): void;\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate state: TaskState;\n\tprivate parent: Task;\n\tprivate self: Task;\n}\n","import { Type } from 'alm_coreutil';\nimport { Task } from '../core/Task';\n\nexport class Call extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(f: Function, args: any[] = null, eventTarget: EventTarget = null, eventType: string = null) {\n\t\tsuper();\n\t\tthis.f = f;\n\t\tthis.args = args;\n\t\tthis.eventTarget = eventTarget;\n\t\tthis.eventType = eventType;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tif (Type.isFunction(this.f)) {\n\t\t\tif (this.eventTarget && this.eventType) {\n\t\t\t\tthis.eventTarget.addEventListener(this.eventType, this.completeHandler);\n\t\t\t\tif (this.args) {\n\t\t\t\t\tthis.f(...this.args);\n\t\t\t\t} else {\n\t\t\t\t\tthis.f();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.args) {\n\t\t\t\t\tthis.f(...this.args);\n\t\t\t\t} else {\n\t\t\t\t\tthis.f();\n\t\t\t\t}\n\t\t\t\tthis.notifyComplete();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.notifyComplete();\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {\n\t\tif (this.eventTarget && this.eventType) {\n\t\t\tthis.eventTarget.removeEventListener(this.eventType, this.completeHandler);\n\t\t}\n\t}\n\n\tprotected implDispose(task: Task): void {\n\t\tif (this.eventTarget && this.eventType) {\n\t\t\tthis.eventTarget.removeEventListener(this.eventType, this.completeHandler);\n\t\t}\n\n\t\tthis.f = null;\n\t\tthis.args = null;\n\t\tthis.eventTarget = null;\n\t\tthis.eventType = null;\n\t}\n\n\tprivate completeHandler = (event: Event): void => {\n\t\tthis.notifyComplete();\n\t};\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate f: Function;\n\tprivate args: any[];\n\tprivate eventTarget: EventTarget;\n\tprivate eventType: string;\n}\n","import { Task } from '../core/Task';\n\nexport class Nop extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tthis.notifyComplete();\n\t}\n\n\tprotected implInterrupt(task: Task): void {}\n\n\tprotected implDispose(task: Task): void {}\n}\n","import { Type } from 'alm_coreutil';\nimport { Task } from './Task';\nimport { Call } from '../task/Call';\nimport { Nop } from '../task/Nop';\n\nexport abstract class TaskList extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tprotected constructor(...tasks: (Task | Function)[]) {\n\t\tsuper();\n\t\tthis.tasks = [];\n\t\tthis.addTask(...tasks);\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tpublic addTask(...tasks: (Task | Function)[]): void {\n\t\tif (tasks.length > 0) {\n\t\t\tthis.preProcess(tasks);\n\t\t\tthis.tasks = this.getTasks().concat(<Task[]>tasks);\n\t\t}\n\t}\n\n\tpublic insertTask(...tasks: (Task | Function)[]): void {\n\t\tthis.insertTaskAt(0, ...tasks);\n\t}\n\n\tprotected insertTaskAt(index: number, ...tasks: (Task | Function)[]): void {\n\t\tif (tasks.length > 0) {\n\t\t\tthis.preProcess(tasks);\n\t\t\tArray.prototype.splice.apply(this.getTasks(), (<any[]>[index, 0]).concat(tasks));\n\t\t}\n\t}\n\n\tpublic addTaskArray(tasks: (Task | Function)[]): void {\n\t\tthis.addTask(...tasks);\n\t}\n\n\tpublic insertTaskArray(tasks: (Task | Function)[]): void {\n\t\tthis.insertTask(...tasks);\n\t}\n\n\tprotected insertTaskArrayAt(index: number, tasks: (Task | Function)[]): void {\n\t\tthis.insertTaskAt(index, ...tasks);\n\t}\n\n\tpublic getLength(): number {\n\t\treturn this.tasks.length;\n\t}\n\n\tpublic getTaskByIndex(index: number): Task {\n\t\treturn this.tasks[index];\n\t}\n\n\tpublic getTasks(): Task[] {\n\t\treturn this.tasks;\n\t}\n\n\tprivate preProcess(tasks: (Task | Function)[]): void {\n\t\tconst taskCount: number = tasks.length;\n\t\tlet task: Task | Function;\n\t\tfor (let i: number = 0; i < taskCount; ++i) {\n\t\t\ttask = tasks[i];\n\t\t\tif (task) {\n\t\t\t\t// function\n\t\t\t\tif (Type.isFunction(task)) {\n\t\t\t\t\ttasks[i] = task = new Call(<Function>task);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// null\n\t\t\t\ttasks[i] = task = new Nop();\n\t\t\t}\n\t\t\t(<Task>task).setParent(this);\n\t\t}\n\t}\n\n\tprotected implRun(task: Task): void {\n\t\tthis.notifyComplete();\n\t}\n\n\tprotected implInterrupt(task: Task): void {}\n\n\tprotected implDispose(task: Task): void {}\n\n\tprotected abstract implNotifyBreak(): void;\n\tprotected abstract implNotifyReturn(): void;\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate tasks: Task[];\n}\n","import { DateUtil, EasingFunction, Type } from 'alm_coreutil';\nimport { AnimFrame } from 'alm_animframe';\nimport { Task } from '../core/Task';\n\nexport type TweenCallbackFunction = (tween: Tween) => void;\n\nexport interface TweenOptions {\n\tfrom?: number;\n\tsuffix?: string;\n\tprefix?: string;\n}\n\nexport interface TweenTarget {\n\tscope: object;\n\tproperty: string;\n\tfrom: number;\n\tto: number;\n\tsuffix: string;\n\tprefix: string;\n\n\t_from: number;\n\t_value: number;\n}\n\nexport enum TweenEventType {\n\tplay = 'play',\n\tstop = 'stop',\n\treset = 'reset',\n\tjump = 'jump',\n\tupdate = 'update',\n\tcomplete = 'complete',\n}\n\nexport class TweenEvent extends CustomEvent<void> {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(type: TweenEventType) {\n\t\tsuper(type);\n\t}\n}\n\nexport class Tween extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(duration: number, easing: EasingFunction) {\n\t\tsuper();\n\n\t\tthis.duration = duration;\n\t\tthis.easing = easing;\n\n\t\tthis.targets = [];\n\t\tthis.isPlaying = false;\n\t\tthis.isPaused = false;\n\n\t\tthis.progressTime = 0;\n\t\tthis.progressValue = this.easing(this.progressTime);\n\n\t\tthis.addEventListener(TweenEventType.play, this.playHandler);\n\t\tthis.addEventListener(TweenEventType.stop, this.stopHandler);\n\t\tthis.addEventListener(TweenEventType.reset, this.resetHandler);\n\t\tthis.addEventListener(TweenEventType.jump, this.jumpHandler);\n\t\tthis.addEventListener(TweenEventType.update, this.updateHandler);\n\t\tthis.addEventListener(TweenEventType.complete, this.completeHandler);\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tpublic target(scope: object, property: string, to: number, options?: TweenOptions): Tween {\n\t\tthis.targets.push({\n\t\t\tscope: scope,\n\t\t\tproperty: property,\n\t\t\tto: to,\n\t\t\tfrom: options?.from,\n\t\t\tsuffix: options?.suffix,\n\t\t\tprefix: options?.prefix,\n\t\t\t_from: null,\n\t\t\t_value: null,\n\t\t});\n\t\treturn this;\n\t}\n\n\tpublic onPlay(f: TweenCallbackFunction): Tween {\n\t\tthis.onPlayFunction = f;\n\t\treturn this;\n\t}\n\n\tpublic onStop(f: TweenCallbackFunction): Tween {\n\t\tthis.onStopFunction = f;\n\t\treturn this;\n\t}\n\n\tpublic onReset(f: TweenCallbackFunction): Tween {\n\t\tthis.onResetFunction = f;\n\t\treturn this;\n\t}\n\n\tpublic onJump(f: TweenCallbackFunction): Tween {\n\t\tthis.onJumpFunction = f;\n\t\treturn this;\n\t}\n\n\tpublic onUpdate(f: TweenCallbackFunction): Tween {\n\t\tthis.onUpdateFunction = f;\n\t\treturn this;\n\t}\n\n\tpublic onComplete(f: TweenCallbackFunction): Tween {\n\t\tthis.onCompleteFunction = f;\n\t\treturn this;\n\t}\n\n\tprotected implRun(task: Task): void {\n\t\tif (this.isPlaying || this.progressTime === 1) return;\n\t\tthis.isPlaying = true;\n\n\t\tif (this.isPaused) {\n\t\t\tthis.isPaused = false;\n\t\t\tthis.startTime = DateUtil.now() - this.elapsedTimePaused;\n\t\t\tAnimFrame.addEventListener(this.requestAnimationFrameHandler);\n\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.play));\n\t\t} else {\n\t\t\tthis.prepare();\n\t\t\tthis.startTime = DateUtil.now();\n\t\t\tthis.elapsedTime = 0;\n\n\t\t\tif (this.duration > 0) {\n\t\t\t\tthis.apply(0);\n\t\t\t\tAnimFrame.addEventListener(this.requestAnimationFrameHandler);\n\t\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.play));\n\t\t\t} else {\n\t\t\t\tthis.apply(0);\n\t\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.play));\n\t\t\t\tthis.apply(1);\n\t\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.update));\n\t\t\t\tthis.isPlaying = false;\n\t\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.complete));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {\n\t\tthis.implDispose(task);\n\t}\n\n\tprotected implDispose(task: Task): void {\n\t\tAnimFrame.removeEventListener(this.requestAnimationFrameHandler);\n\t\tthis.isPlaying = false;\n\t\tthis.isPaused = false;\n\t\tthis.targets = null;\n\t\tthis.easing = null;\n\t\tthis.onPlayFunction = null;\n\t\tthis.onStopFunction = null;\n\t\tthis.onResetFunction = null;\n\t\tthis.onJumpFunction = null;\n\t\tthis.onUpdateFunction = null;\n\t\tthis.onCompleteFunction = null;\n\t}\n\n\tpublic stop(): void {\n\t\tif (!this.isPlaying) return;\n\t\tthis.isPlaying = false;\n\n\t\tthis.isPaused = true;\n\t\tthis.elapsedTimePaused = this.elapsedTime;\n\t\tAnimFrame.removeEventListener(this.requestAnimationFrameHandler);\n\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.stop));\n\t}\n\n\tpublic togglePlaying(): void {\n\t\tthis.isPlaying ? this.stop() : this.run();\n\t}\n\n\tpublic reset(): void {\n\t\tif (!this.isPlaying) return;\n\t\tthis.isPlaying = false;\n\n\t\tthis.elapsedTime = 0;\n\t\tthis.apply(0);\n\t\tAnimFrame.removeEventListener(this.requestAnimationFrameHandler);\n\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.reset));\n\t}\n\n\tpublic jump(progress: number): void {\n\t\tif (this.progressTime === progress) return;\n\n\t\tthis.elapsedTime = progress * this.duration;\n\t\tif (this.isPlaying) {\n\t\t\tthis.startTime = DateUtil.now() - this.elapsedTime;\n\t\t}\n\t\tif (this.isPaused) {\n\t\t\tthis.elapsedTimePaused = this.elapsedTime;\n\t\t}\n\n\t\tthis.prepare();\n\t\tthis.apply(progress);\n\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.jump));\n\t}\n\n\tprivate requestAnimationFrameHandler = (): void => {\n\t\tif (this.isPlaying) {\n\t\t\tthis.elapsedTime = DateUtil.now() - this.startTime;\n\t\t\tif (this.elapsedTime >= this.duration) {\n\t\t\t\tthis.elapsedTime = this.duration;\n\t\t\t\tthis.apply(1);\n\t\t\t\tAnimFrame.removeEventListener(this.requestAnimationFrameHandler);\n\t\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.update));\n\t\t\t\tthis.isPlaying = false;\n\t\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.complete));\n\t\t\t\tthis.notifyComplete();\n\t\t\t} else {\n\t\t\t\tthis.apply(this.elapsedTime / this.duration);\n\t\t\t\tthis.dispatchEvent(new TweenEvent(TweenEventType.update));\n\t\t\t}\n\t\t}\n\t};\n\n\tprivate prepare(): void {\n\t\tconst targetCount = this.targets.length;\n\t\tfor (let i = 0; i < targetCount; ++i) {\n\t\t\tconst target = this.targets[i];\n\t\t\ttarget._from = Type.isNumber(target.from) ? target.from : Tween.getValue(target);\n\t\t}\n\t}\n\n\tprivate apply(timeRatio: number): void {\n\t\tthis.progressTime = timeRatio;\n\t\tthis.progressValue = this.easing(this.progressTime);\n\t\tconst targetCount = this.targets.length;\n\t\tfor (let i = 0; i < targetCount; ++i) {\n\t\t\tconst target = this.targets[i];\n\t\t\tTween.setValue(target, Tween.map(this.progressValue, target._from, target.to));\n\t\t}\n\t}\n\n\tprivate static map(progress: number, from: number, to: number): number {\n\t\treturn progress * (to - from) + from;\n\t}\n\n\tprivate static setValue(target: TweenTarget, value: number): void {\n\t\ttarget._value = value;\n\t\tTween.setProperty(value, target.scope, target.property, target.prefix, target.suffix);\n\t}\n\n\tprivate static getValue(target: TweenTarget): number {\n\t\treturn (target._value = Tween.getProperty(target.scope, target.property, target.prefix, target.suffix));\n\t}\n\n\tprivate static setProperty(value: number, scope: object, property: string, prefix: string, suffix: string): void {\n\t\tif (prefix) {\n\t\t\tvalue = <any>(prefix + value);\n\t\t}\n\t\tif (suffix) {\n\t\t\tvalue = <any>(value + suffix);\n\t\t}\n\t\tscope[property] = value;\n\t}\n\n\tprivate static getProperty(scope: object, property: string, prefix: string, suffix: string): number {\n\t\treturn prefix || suffix ? parseFloat(scope[property]) || 0 : scope[property];\n\t}\n\n\tpublic getIsPlaying(): boolean {\n\t\treturn this.isPlaying;\n\t}\n\n\tpublic getProgressTime(): number {\n\t\treturn this.progressTime;\n\t}\n\n\tpublic getProgressValue(): number {\n\t\treturn this.progressValue;\n\t}\n\n\tpublic getDuration(): number {\n\t\treturn this.duration;\n\t}\n\n\tprivate playHandler = (): void => {\n\t\tif (this.onPlayFunction) {\n\t\t\tthis.onPlayFunction(this);\n\t\t}\n\t};\n\n\tprivate stopHandler = (): void => {\n\t\tif (this.onStopFunction) {\n\t\t\tthis.onStopFunction(this);\n\t\t}\n\t};\n\n\tprivate resetHandler = (): void => {\n\t\tif (this.onResetFunction) {\n\t\t\tthis.onResetFunction(this);\n\t\t}\n\t};\n\n\tprivate jumpHandler = (): void => {\n\t\tif (this.onJumpFunction) {\n\t\t\tthis.onJumpFunction(this);\n\t\t}\n\t};\n\n\tprivate updateHandler = (): void => {\n\t\tif (this.onUpdateFunction) {\n\t\t\tthis.onUpdateFunction(this);\n\t\t}\n\t};\n\n\tprivate completeHandler = (): void => {\n\t\tif (this.onCompleteFunction) {\n\t\t\tthis.onCompleteFunction(this);\n\t\t}\n\t};\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate targets: TweenTarget[];\n\tprivate duration: number;\n\tprivate easing: EasingFunction;\n\n\tprivate isPlaying: boolean;\n\tprivate isPaused: boolean;\n\tprivate progressTime: number;\n\tprivate progressValue: number;\n\tprivate startTime: number;\n\tprivate elapsedTimePaused: number;\n\tprivate elapsedTime: number;\n\n\tprivate onPlayFunction: TweenCallbackFunction;\n\tprivate onStopFunction: TweenCallbackFunction;\n\tprivate onResetFunction: TweenCallbackFunction;\n\tprivate onJumpFunction: TweenCallbackFunction;\n\tprivate onUpdateFunction: TweenCallbackFunction;\n\tprivate onCompleteFunction: TweenCallbackFunction;\n}\n","import { Task } from '../core/Task';\n\nexport class Break extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tconst f: Function = this.getParent()['notifyBreak'];\n\t\tif (f) f();\n\t\tthis.notifyComplete();\n\t}\n\n\tprotected implInterrupt(task: Task): void {}\n\n\tprotected implDispose(task: Task): void {}\n}\n","import { Type } from 'alm_coreutil';\nimport { Task } from '../core/Task';\n\nexport type CallbackFunction = (complete: () => void) => void;\n\nexport class Callback extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(f: CallbackFunction) {\n\t\tsuper();\n\t\tthis.f = f;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tif (Type.isFunction(this.f)) {\n\t\t\tthis.f((): void => {\n\t\t\t\tthis.notifyComplete();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.notifyComplete();\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {}\n\n\tprotected implDispose(task: Task): void {\n\t\tthis.f = null;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate f: CallbackFunction;\n}\n","import { Type } from 'alm_coreutil';\nimport { Task } from '../core/Task';\nimport { TaskEvent, TaskEventType } from '../core/TaskEvent';\n\nexport type Condition = boolean | ((...args: any) => boolean);\n\nexport class If extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(condition: Condition, then: Task, reject: Task) {\n\t\tsuper();\n\t\tthis.condition = condition;\n\t\tthis.then = then;\n\t\tthis.reject = reject;\n\t\tthis.selectedTask = null;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tlet result: boolean;\n\t\tif (Type.isFunction(this.condition)) {\n\t\t\tresult = (<Function>this.condition)();\n\t\t} else {\n\t\t\tresult = <boolean>this.condition;\n\t\t}\n\n\t\tif (result) {\n\t\t\tif (this.then) {\n\t\t\t\tthis.selectedTask = this.then;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.reject) {\n\t\t\t\tthis.selectedTask = this.reject;\n\t\t\t}\n\t\t}\n\n\t\tif (this.selectedTask) {\n\t\t\tthis.selectedTask.addEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\tthis.selectedTask.run();\n\t\t} else {\n\t\t\tthis.notifyComplete();\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {\n\t\tif (this.selectedTask) {\n\t\t\tthis.selectedTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\tthis.selectedTask.interrupt();\n\t\t\tthis.selectedTask = null;\n\t\t}\n\t}\n\n\tprotected implDispose(task: Task): void {\n\t\tif (this.selectedTask) {\n\t\t\tthis.selectedTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\tthis.selectedTask.dispose();\n\t\t\tthis.selectedTask = null;\n\t\t}\n\n\t\tthis.condition = null;\n\t\tthis.then = null;\n\t\tthis.reject = null;\n\t}\n\n\tprivate completeHandler = (event: TaskEvent): void => {\n\t\tthis.selectedTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\tthis.selectedTask = null;\n\t\tthis.notifyComplete();\n\t};\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate condition: Condition;\n\tprivate then: Task;\n\tprivate reject: Task;\n\tprivate selectedTask: Task;\n}\n","import { Task } from '../core/Task';\n\nexport class Listen extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(eventTarget: EventTarget, eventType: string) {\n\t\tsuper();\n\t\tthis.eventTarget = eventTarget;\n\t\tthis.eventType = eventType;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tif (this.eventTarget && this.eventType) {\n\t\t\tthis.eventTarget.addEventListener(this.eventType, this.completeHandler);\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {\n\t\tif (this.eventTarget && this.eventType) {\n\t\t\tthis.eventTarget.removeEventListener(this.eventType, this.completeHandler);\n\t\t}\n\t}\n\n\tprotected implDispose(task: Task): void {\n\t\tif (this.eventTarget && this.eventType) {\n\t\t\tthis.eventTarget.removeEventListener(this.eventType, this.completeHandler);\n\t\t}\n\n\t\tthis.eventType = null;\n\t\tthis.eventTarget = null;\n\t}\n\n\tprivate completeHandler = (event: Event): void => {\n\t\tthis.notifyComplete();\n\t};\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate eventTarget: EventTarget;\n\tprivate eventType: string;\n}\n","import { Task } from '../core/Task';\n\nexport class Log extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(...messages: any[]) {\n\t\tsuper();\n\t\tthis.messages = messages;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tconsole.log.apply(console, Array.prototype.slice.call(this.messages));\n\t\tthis.notifyComplete();\n\t}\n\n\tprotected implInterrupt(task: Task): void {}\n\n\tprotected implDispose(task: Task): void {\n\t\tthis.messages = null;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate messages: any[];\n}\n","import { Task } from '../core/Task';\nimport { TaskEvent, TaskEventType } from '../core/TaskEvent';\nimport { TaskState } from '../core/TaskState';\nimport { TaskList } from '../core/TaskList';\n\nexport class Parallel extends TaskList {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(...tasks: (Task | Function)[]) {\n\t\tsuper(...tasks);\n\t\tthis.completeCount = 0;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tpublic addTask(...tasks: (Task | Function)[]): void {\n\t\tsuper.addTask(...tasks);\n\t}\n\n\tpublic insertTask(...tasks: (Task | Function)[]): void {\n\t\tthis.addTask(...tasks);\n\t}\n\n\tpublic addTaskArray(tasks: (Task | Function)[]): void {\n\t\tthis.addTask(...tasks);\n\t}\n\n\tpublic insertTaskArray(tasks: (Task | Function)[]): void {\n\t\tthis.addTask(...tasks);\n\t}\n\n\tprivate completeHandler = (event: TaskEvent): void => {\n\t\tif (++this.completeCount >= this.getLength()) {\n\t\t\tthis.notifyComplete();\n\t\t}\n\t};\n\n\tprotected implRun(task: Task): void {\n\t\tthis.completeCount = 0;\n\t\tconst length: number = this.getLength();\n\t\tif (length > 0) {\n\t\t\tconst tasks: Task[] = this.getTasks();\n\t\t\tlet task: Task;\n\t\t\tfor (let i: number = 0; i < length; ++i) {\n\t\t\t\ttask = tasks[i];\n\t\t\t\ttask.addEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\t\ttask.run();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.notifyComplete();\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {\n\t\tconst length: number = this.getLength();\n\t\tif (length > 0) {\n\t\t\tconst tasks: Task[] = this.getTasks();\n\t\t\tlet task: Task;\n\t\t\tfor (let i: number = 0; i < length; ++i) {\n\t\t\t\ttask = tasks[i];\n\t\t\t\ttask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\t\ttask.interrupt();\n\t\t\t}\n\t\t}\n\t\tsuper.implInterrupt(task);\n\t}\n\n\tprotected implDispose(task: Task): void {\n\t\tconst length: number = this.getLength();\n\t\tif (length > 0) {\n\t\t\tconst tasks: Task[] = this.getTasks();\n\t\t\tlet task: Task;\n\t\t\tfor (let i: number = 0; i < length; ++i) {\n\t\t\t\ttask = tasks[i];\n\t\t\t\ttask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\t\ttask.dispose();\n\t\t\t}\n\t\t}\n\t\tsuper.implDispose(task);\n\t}\n\n\tprotected implNotifyBreak(): void {\n\t\tconst length: number = this.getLength();\n\t\tif (length > 0) {\n\t\t\tconst tasks: Task[] = this.getTasks();\n\t\t\tlet task: Task;\n\t\t\tfor (let i: number = 0; i < length; ++i) {\n\t\t\t\ttask = tasks[i];\n\t\t\t\tif (task.getState() === TaskState.running) {\n\t\t\t\t\ttask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\t\t\ttask.interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.notifyComplete();\n\t}\n\n\tprotected implNotifyReturn(): void {\n\t\tconst length: number = this.getLength();\n\t\tif (length > 0) {\n\t\t\tconst tasks: Task[] = this.getTasks();\n\t\t\tlet task: Task;\n\t\t\tfor (let i: number = 0; i < length; ++i) {\n\t\t\t\ttask = tasks[i];\n\t\t\t\tif (task.getState() === TaskState.running) {\n\t\t\t\t\ttask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\t\t\ttask.interrupt();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst f: Function = this.getParent()['notifyReturn'];\n\t\tif (f) f();\n\t\tthis.dispose();\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate completeCount: number;\n\tprivate currentTask: Task;\n\tprivate isPaused: boolean;\n\tprivate isCompleteOnPaused: boolean;\n}\n","import { Task } from '../core/Task';\n\nexport class Return extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tconst f: Function = this.getParent()['notifyReturn'];\n\t\tif (f) f();\n\t\tthis.notifyComplete();\n\t}\n\n\tprotected implInterrupt(task: Task): void {}\n\n\tprotected implDispose(task: Task): void {}\n}\n","import { Task } from '../core/Task';\nimport { TaskEvent, TaskEventType } from '../core/TaskEvent';\nimport { TaskState } from '../core/TaskState';\nimport { TaskList } from '../core/TaskList';\n\nexport class Serial extends TaskList {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(...tasks: (Task | Function)[]) {\n\t\tsuper(...tasks);\n\t\tthis.currentTask = null;\n\t\tthis.position = -1;\n\t\tthis.isPaused = false;\n\t\tthis.isCompleteOnPaused = false;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tpublic addTask(...tasks: (Task | Function)[]): void {\n\t\tsuper.addTask(...tasks);\n\t}\n\n\tpublic insertTask(...tasks: (Task | Function)[]): void {\n\t\tsuper.insertTaskAt(this.position + 1, ...tasks);\n\t}\n\n\tpublic addTaskArray(tasks: (Task | Function)[]): void {\n\t\tthis.addTask(...tasks);\n\t}\n\n\tpublic insertTaskArray(tasks: (Task | Function)[]): void {\n\t\tthis.insertTask(...tasks);\n\t}\n\n\tprivate next(): void {\n\t\tthis.currentTask = this.getTaskByIndex(this.position);\n\t\tthis.currentTask.addEventListener(TaskEventType.complete, this.completeHandler);\n\t\tthis.currentTask.run();\n\t}\n\n\tprivate completeHandler = (event: TaskEvent): void => {\n\t\tthis.currentTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\tthis.currentTask = null;\n\t\tif (++this.position >= this.getLength()) {\n\t\t\tthis.notifyComplete();\n\t\t} else {\n\t\t\tthis.next();\n\t\t}\n\t};\n\n\tprotected implRun(task: Task): void {\n\t\tthis.position = 0;\n\t\tif (this.getLength() > 0) {\n\t\t\tthis.next();\n\t\t} else {\n\t\t\tthis.notifyComplete();\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {\n\t\tif (this.currentTask) {\n\t\t\tthis.currentTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\tthis.currentTask.interrupt();\n\t\t\tthis.currentTask = null;\n\t\t}\n\t\tthis.position = -1;\n\t\tsuper.implInterrupt(task);\n\t}\n\n\tprotected implDispose(task: Task): void {\n\t\tif (this.currentTask) {\n\t\t\tthis.currentTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\tthis.currentTask.dispose();\n\t\t\tthis.currentTask = null;\n\t\t}\n\t\tthis.position = -1;\n\t\tthis.isPaused = false;\n\t\tthis.isCompleteOnPaused = false;\n\t\tsuper.implDispose(task);\n\t}\n\n\tprotected implNotifyBreak(): void {\n\t\tif (this.currentTask.getState() === TaskState.running) {\n\t\t\tthis.currentTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\tthis.currentTask.interrupt();\n\t\t}\n\t\tthis.notifyComplete();\n\t}\n\n\tprotected implNotifyReturn(): void {\n\t\tif (this.currentTask.getState() === TaskState.running) {\n\t\t\tthis.currentTask.removeEventListener(TaskEventType.complete, this.completeHandler);\n\t\t\tthis.currentTask.interrupt();\n\t\t}\n\t\tconst f: Function = this.getParent()['notifyReturn'];\n\t\tif (f) f();\n\t\tthis.dispose();\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate position: number;\n\tprivate currentTask: Task;\n\tprivate isPaused: boolean;\n\tprivate isCompleteOnPaused: boolean;\n}\n","import { Task } from '../core/Task';\n\nexport class Delay extends Task {\n\t// --------------------------------------------------\n\t//\n\t// CONSTRUCTOR\n\t//\n\t// --------------------------------------------------\n\n\tconstructor(time: number) {\n\t\tsuper();\n\t\tthis.time = time;\n\t\tthis.timerId = -1;\n\t}\n\n\t// --------------------------------------------------\n\t//\n\t// METHOD\n\t//\n\t// --------------------------------------------------\n\n\tprotected implRun(task: Task): void {\n\t\tif (this.time > 0) {\n\t\t\tthis.timerId = window.setTimeout(this.completeHandler, this.time);\n\t\t} else {\n\t\t\tthis.notifyComplete();\n\t\t}\n\t}\n\n\tprotected implInterrupt(task: Task): void {\n\t\tthis.cancel();\n\t}\n\n\tprotected implDispose(task: Task): void {\n\t\tthis.cancel();\n\t}\n\n\tprivate cancel(): void {\n\t\tif (this.timerId !== -1) {\n\t\t\tclearTimeout(this.timerId);\n\t\t\tthis.timerId = -1;\n\t\t}\n\t}\n\n\tprivate completeHandler = (): void => {\n\t\tthis.notifyComplete();\n\t};\n\n\t// --------------------------------------------------\n\t//\n\t// MEMBER\n\t//\n\t// --------------------------------------------------\n\n\tprivate time: number;\n\tprivate timerId: number;\n}\n","import { EasingFunction } from 'alm_coreutil';\nimport { Callback, CallbackFunction } from './task/Callback';\nimport { Call } from './task/Call';\nimport { Delay } from './task/Delay';\nimport { Parallel } from './task/Parallel';\nimport { Serial } from './task/Serial';\nimport { Task } from './core/Task';\nimport { Break } from './task/Break';\nimport { Return } from './task/Return';\nimport { Nop } from './task/Nop';\nimport { Condition, If } from './task/If';\nimport { Listen } from './task/Listen';\nimport { Log } from './task/Log';\nimport { Tween } from './task/Tween';\n\nexport function call(f: Function, args: any[] = null, eventTarget: EventTarget = null, eventType: string = null): Call {\n\treturn new Call(f, args, eventTarget, eventType);\n}\n\nexport function callback(f: CallbackFunction): Callback {\n\treturn new Callback(f);\n}\n\nexport function delay(time: number): Delay {\n\treturn new Delay(time);\n}\n\nexport function branch(condition: Condition, then: Task, reject: Task): If {\n\treturn new If(condition, then, reject);\n}\n\nexport function listen(eventTarget: EventTarget, eventType: string): Listen {\n\treturn new Listen(eventTarget, eventType);\n}\n\nexport function log(...messages: any[]): Log {\n\treturn new (Function.prototype.bind.call(Log, null, ...messages))();\n}\n\nexport function tween(duration: number, easing: EasingFunction): Tween {\n\treturn new Tween(duration, easing);\n}\n\nexport function serial(...tasks: (Task | Function)[]): Serial {\n\treturn new (Function.prototype.bind.call(Serial, null, ...tasks))();\n}\n\nexport function parallel(...tasks: (Task | Function)[]): Parallel {\n\treturn new (Function.prototype.bind.call(Parallel, null, ...tasks))();\n}\n\nexport function br(): Break {\n\treturn new Break();\n}\n\nexport function ret(): Return {\n\treturn new Return();\n}\n\nexport function nop(): Nop {\n\treturn new Nop();\n}\n","import { Task } from './core/Task';\n\nexport function dispose(task: Task): null {\n\tif (task) {\n\t\ttask.dispose();\n\t}\n\treturn null;\n}\n"],"names":["TaskEventType","TaskState","TaskEvent","CustomEvent","constructor","type","super","Task","EventTarget","this","state","sleeping","self","parent","run","Error","running","implRun","call","interrupt","interrupting","implInterrupt","dispose","implDispose","notifyComplete","dispatchEvent","complete","getState","getParent","setParent","getSelf","Call","f","args","eventTarget","eventType","completeHandler","event","task","Type","isFunction","addEventListener","removeEventListener","Nop","TaskList","tasks","addTask","length","preProcess","getTasks","concat","insertTask","insertTaskAt","index","Array","prototype","splice","apply","addTaskArray","insertTaskArray","insertTaskArrayAt","getLength","getTaskByIndex","taskCount","i","TweenEventType","Break","Callback","If","condition","then","reject","selectedTask","result","Listen","Log","messages","console","log","slice","Parallel","completeCount","implNotifyBreak","implNotifyReturn","Return","Serial","currentTask","position","next","isPaused","isCompleteOnPaused","TweenEvent","Tween","duration","easing","requestAnimationFrameHandler","isPlaying","elapsedTime","DateUtil","now","startTime","AnimFrame","update","playHandler","onPlayFunction","stopHandler","onStopFunction","resetHandler","onResetFunction","jumpHandler","onJumpFunction","updateHandler","onUpdateFunction","onCompleteFunction","targets","progressTime","progressValue","play","stop","reset","jump","target","scope","property","to","options","push","from","suffix","prefix","_from","_value","onPlay","onStop","onReset","onJump","onUpdate","onComplete","elapsedTimePaused","prepare","togglePlaying","progress","targetCount","isNumber","getValue","timeRatio","setValue","map","static","value","setProperty","getProperty","parseFloat","getIsPlaying","getProgressTime","getProgressValue","getDuration","Delay","time","timerId","window","setTimeout","cancel","clearTimeout","Function","bind"],"mappings":"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"}